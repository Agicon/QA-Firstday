name: Run Automation Tests

on:
  repository_dispatch:
    types: [trigger-from-portal-repo]

permissions:
  contents: write
  id-token: write

env:
  AWS_REGION: "us-east-2"
  AWS_IAM_ROLE_ARN: "arn:aws:iam::242201267571:role/GithubAction-Role"

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Chrome
      - name: Install Chrome
        run: sudo apt-get install -y google-chrome-stable

      # Step 5: Clean up Chrome user data
      - name: Clean up Chrome user data
        run: rm -rf /tmp/chrome-user-data-*

      # Step 6: Run WebdriverIO tests
      - name: Run WebdriverIO tests
        run: npm run newCustomerPage
        continue-on-error: true

      # Step 7: Install Allure CLI
      - name: Install Allure CLI
        run: |
          sudo npm install -g allure-commandline --unsafe-perm=true

      # Step 8: Generate Allure Report
      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report

      # Step 9: Upload Allure Report as Artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN }}
          role-session-name: ${{ github.event.repository.name }}-${{ env.GITHUB_RUN_ATTEMPT }}

      # Step 10: Upload Allure Report to S3
      - name: Upload Allure Report to S3
        run: |
          aws s3 sync allure-report s3://firstday-qa-automation-test-results --delete

      # Step 11: Invalidate CloudFront cache
      - name: Invalidate CloudFront Distribution
        run: |
          aws cloudfront create-invalidation --distribution-id E2CJJK9B969EBX --paths "/*"
